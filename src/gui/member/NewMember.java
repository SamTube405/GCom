/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewMember.java
 *
 * Created on Dec 17, 2013, 11:07:21 AM
 */
package gui.member;

import gcom.RMIServer;
import gcom.interfaces.IGroupManagement;
import gcom.interfaces.IMember;
import gcom.interfaces.IMessage;
import gcom.modules.group.Member;
import gcom.modules.group.Message;
import java.awt.Color;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author ens13pps
 */
public class NewMember extends javax.swing.JDialog {

    private Registry registry;
    private HashMap<String, Integer> gs;
    private IGroupManagement igm;
    private IMember imem;
    private RMIServer srv;
    String groupName;
    private IMember member;
    IMember stub;

    /**
     * Creates new form NewMember
     */
    public NewMember(java.awt.Frame parent, boolean modal) throws RemoteException {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        panelMem.setVisible(false);

    }

    private void checkConnection(String host, int port) {

        try {
            srv = new RMIServer(host, port);
            registry = srv.start();
            igm = srv.regLookUp("IGroupManagement");
            gs = igm.getGroupDetails();
            lblMsg.setText("Connection to " + host + " from " + port + " successful.");
            lblMsg.setForeground(Color.black);
        } catch (AccessException ex) {
            Logger.getLogger(NewMember.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(NewMember.class.getName()).log(Level.SEVERE, null, ex);
            lblMsg.setText("Cannot Connect to " + host + " from " + port + ".");
            lblMsg.setForeground(Color.red);
        } catch (NotBoundException ex) {
            Logger.getLogger(NewMember.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * @return the member
     */
    public IMember getMember() {
        return member;
    }

    /**
     * @param member the member to set
     */
    public void setMember(IMember member) {
        this.member = member;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmbHost = new javax.swing.JComboBox();
        cmbPort = new javax.swing.JComboBox();
        panelMem = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cmbGroup = new javax.swing.JComboBox();
        txtMember = new javax.swing.JTextField();
        btnCreateMember = new javax.swing.JButton();
        btnElection = new javax.swing.JButton();
        btnConnect = new javax.swing.JButton();
        lblMsg = new javax.swing.JLabel();

        setTitle("Join to a Group");

        jLabel4.setText("Host");

        jLabel5.setText("Port");

        cmbHost.setEditable(true);
        cmbHost.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "localhost" }));

        cmbPort.setEditable(true);
        cmbPort.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1099" }));

        panelMem.setBorder(javax.swing.BorderFactory.createTitledBorder("Member Info"));

        jLabel2.setText("Member Name");

        jLabel1.setText("Group");

        btnCreateMember.setText("Create");
        btnCreateMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateMemberActionPerformed(evt);
            }
        });

        btnElection.setText("Start Election");
        btnElection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelMemLayout = new javax.swing.GroupLayout(panelMem);
        panelMem.setLayout(panelMemLayout);
        panelMemLayout.setHorizontalGroup(
            panelMemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMemLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMemLayout.createSequentialGroup()
                        .addGroup(panelMemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(31, 31, 31)
                        .addGroup(panelMemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMember)
                            .addComponent(cmbGroup, 0, 186, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMemLayout.createSequentialGroup()
                        .addComponent(btnElection)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCreateMember, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelMemLayout.setVerticalGroup(
            panelMemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMemLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelMemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtMember, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelMemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCreateMember)
                    .addComponent(btnElection))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        lblMsg.setText("specify the host+port you need to connect and click \"Connect\"");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelMem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbHost, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbPort, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblMsg, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cmbHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cmbPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConnect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblMsg)
                .addGap(12, 12, 12)
                .addComponent(panelMem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
    String host = cmbHost.getSelectedItem().toString().trim();
    int port = -1;
    if (host.isEmpty()) {
        int res = JOptionPane.showConfirmDialog(NewMember.this, "Invalid host specified : " + host + "\nDo you want to use localhost?", "Invalid Host", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
        if (res == JOptionPane.YES_OPTION) {
            host = "localhost";
        }
    }
    try {
        port = Integer.parseInt(cmbPort.getSelectedItem().toString().trim());
    } catch (Exception e) {
        int res = JOptionPane.showConfirmDialog(NewMember.this, "Invalid port number specified : " + port + "\nDo you want to use the default port (1099)?", "Invalid Port", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
        if (res == JOptionPane.YES_OPTION) {
            port = 1099;
        }
    }
    checkConnection(host, port);
    if (gs != null) {
        panelMem.setVisible(true);
        cmbGroup.removeAllItems();
        for (String key : gs.keySet()) {
            cmbGroup.addItem(key);
        }
    } else {
        panelMem.setVisible(false);
    }

}//GEN-LAST:event_btnConnectActionPerformed

private void btnCreateMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateMemberActionPerformed
    groupName = cmbGroup.getSelectedItem().toString().trim();
    String memName = txtMember.getText();
    if (memName.isEmpty()) {
        int res = JOptionPane.showConfirmDialog(NewMember.this, "Member name can not be empty", "Invalid Member", JOptionPane.OK_OPTION, JOptionPane.WARNING_MESSAGE);
    } else {
        try {
            ArrayList<String> params = new ArrayList<String>();
            params.add(groupName);
            params.add(memName);

            setMember(new Member(memName, null));
            stub = (IMember) UnicastRemoteObject.exportObject(getMember(), 0);
            Message msg = new Message(groupName, getMember(), params, IMessage.TYPE_MESSAGE.JOINREQUEST);



            if (gs.get(groupName) <= 0) {
                setMember(igm.sendRequest(msg));
                srv.rebind(getMember().getParentGroup().getGroupName(), stub);
            } else {
                imem = srv.regMemLookUp(groupName);
                setMember(imem.sendRequest(msg));
            }

            //getMember().getElection().addNeighbour(getMember(), false);
            System.out.println("Member created....mem count: " + getMember().getParentGroup().getMemberCount()+" ID: "+getMember().getIdentifier());

        } catch (RemoteException ex) {
            Logger.getLogger(NewMember.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(NewMember.class.getName()).log(Level.SEVERE, null, ex);
        }


    }

}//GEN-LAST:event_btnCreateMemberActionPerformed

    private void btnElectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElectionActionPerformed
//        try {
                    try {
                        if (getMember().getParentGroup().getMemberCount() > 1) {
                            Message emessage = new Message(getMember().getParentGroup().getGroupName(), getMember().getMembers().indexOf(getMember()), getMember().getIdentifier(), IMessage.TYPE_MESSAGE.ELECTION);
                            System.out.println(getMember().getName()+" Starting the election...");
                            getMember().setElectionParticipant(true);
                            getMember().callElection(emessage);   
                            
                            
                        }else{
                            System.out.println("You have no neighbours..So you're the leader! "+getMember().getName());
                        }
                    } catch (RemoteException ex) {
                        Logger.getLogger(NewMember.class.getName()).log(Level.SEVERE, null, ex);
                    }
//                    for(IMember m:getMember().getMembers()) System.out.println(m.getName()+"->"+m.getNeighbour(getMember().getMembers().indexOf(m)).getName()+" "+m.getNeighbour(getMember().getMembers().indexOf(m)).getIdentifier());
//        } catch (RemoteException ex) {
//            Logger.getLogger(NewMember.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_btnElectionActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnCreateMember;
    private javax.swing.JButton btnElection;
    private javax.swing.JComboBox cmbGroup;
    private javax.swing.JComboBox cmbHost;
    private javax.swing.JComboBox cmbPort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lblMsg;
    private javax.swing.JPanel panelMem;
    private javax.swing.JTextField txtMember;
    // End of variables declaration//GEN-END:variables

    public static void main(String[] args) throws RemoteException {

        new NewMember(null, true).setVisible(true);
    }
}
