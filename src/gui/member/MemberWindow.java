/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MemberWindow.java
 *
 * Created on Dec 5, 2013, 6:36:59 PM
 */
package gui.member;

import gcom.RMIServer;
import gcom.interfaces.IMember;
import gcom.modules.group.Group;
import gui.SingleChat;
import java.awt.Color;
import java.awt.Component;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author Praneeth
 */
public class MemberWindow extends javax.swing.JFrame {

    //** Creates new form MemberWindow */
    private ArrayList<String> contacts;
    private IMember member;
    String memName;
    private Group group;
    private DebugWindow debug;
    private MemberContainer memberContainer;
    private RMIServer server;

    public MemberWindow(MemberContainer memberContainer) {
        initComponents();
    }

    public void initialize(MemberContainer memberContainer, String statusLog) {
        // setLocationRelativeTo(null);
        try {
            this.memberContainer = memberContainer;
            this.member = memberContainer.getMember();
            debug = new DebugWindow(this, memberContainer);
            debug.updateStatus(statusLog);
            this.group = member.getParentGroup();
            this.memName = member.getName();
            lblMemberName.setText(member.getName());
        } catch (RemoteException ex) {
            lblMemberName.setText("Unknown");
            Logger.getLogger(MemberWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        setTitle(getTitle() + " : " + group.getGroupName());
        setIconImage(new ImageIcon(MemberWindow.class.getResource("/pics/logo.png")).getImage());
        contacts = getContacts();
        fillContacts(contacts);
        lstContacts.setCellRenderer(new MyListRenderer());
        cmbStatus.setRenderer(new MyListRenderer());
        //Online, Away, Busy, Invisible
        cmbStatus.addItem(new JLabel("Online", new ImageIcon(new ImageIcon(MemberWindow.class.getResource("/pics/online.png")).getImage()), JLabel.LEFT));
        cmbStatus.addItem(new JLabel("Away", new ImageIcon(new ImageIcon(MemberWindow.class.getResource("/pics/away.png")).getImage()), JLabel.LEFT));
        cmbStatus.addItem(new JLabel("Busy", new ImageIcon(new ImageIcon(MemberWindow.class.getResource("/pics/busy.png")).getImage()), JLabel.LEFT));
        cmbStatus.addItem(new JLabel("Invisible", new ImageIcon(new ImageIcon(MemberWindow.class.getResource("/pics/invisible.png")).getImage()), JLabel.LEFT));
    }

    private void fillContacts(ArrayList<String> contacts) {
        DefaultListModel l = new DefaultListModel();
        Vector v = new Vector();
        int c = 0;
        for (int i = 0; i < contacts.size(); i++) {
            JLabel lb = new JLabel(contacts.get(i));
            lb.setIcon(new ImageIcon(new ImageIcon(MemberWindow.class.getResource("/pics/online.png")).getImage()));
            System.out.println(contacts.get(i));
            //lstContacts.add(j);
            v.add(lb);
        }
        lstContacts.setListData(v);
    }

    public void debugWindowClosed() {
        mnuDebug.setSelected(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contactListPopUp = new javax.swing.JPopupMenu();
        refreshList = new javax.swing.JMenuItem();
        logoLabel = new javax.swing.JLabel();
        lblMemberName = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstContacts = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        txtSearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        mnuMainMenu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        toolsMenu = new javax.swing.JMenu();
        mnuDebug = new javax.swing.JCheckBoxMenuItem();
        mnuSingleChat = new javax.swing.JCheckBoxMenuItem();
        aboutMenu = new javax.swing.JMenu();

        refreshList.setMnemonic('r');
        refreshList.setText("Refresh");
        contactListPopUp.add(refreshList);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("GCom Chat");
        setLocationByPlatform(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        logoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/logo.png"))); // NOI18N

        lblMemberName.setFont(new java.awt.Font("Dialog", 0, 18));
        lblMemberName.setText("Praneeth Nilanga Peiris");

        cmbStatus.setFont(new java.awt.Font("Dialog", 0, 12));

        lstContacts.setFont(new java.awt.Font("Dialog", 0, 14));
        lstContacts.setComponentPopupMenu(contactListPopUp);
        lstContacts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstContactsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lstContacts);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtSearch.setForeground(new java.awt.Color(-8355712,true));
        txtSearch.setText("Search Contacts");
        txtSearch.setBorder(null);
        txtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSearchFocusLost(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/search.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
            .addComponent(txtSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
        );

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        mnuMainMenu.add(fileMenu);

        toolsMenu.setMnemonic('T');
        toolsMenu.setText("Tools");

        mnuDebug.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        mnuDebug.setText("Debug");
        mnuDebug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuDebugActionPerformed(evt);
            }
        });
        toolsMenu.add(mnuDebug);

        mnuSingleChat.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mnuSingleChat.setSelected(true);
        mnuSingleChat.setText("Single Window Chat");
        toolsMenu.add(mnuSingleChat);

        mnuMainMenu.add(toolsMenu);

        aboutMenu.setMnemonic('A');
        aboutMenu.setText("About");
        mnuMainMenu.add(aboutMenu);

        setJMenuBar(mnuMainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(logoLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMemberName, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                            .addComponent(cmbStatus, 0, 240, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblMemberName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(logoLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private ArrayList<String> getContacts() {
        ArrayList<String> c = new ArrayList<String>();
        try {
            HashMap<String, IMember> membersList = group.getMembersList();
            for (String m : membersList.keySet()) {
                c.add(m);
            }
            c.remove(memName);
        } catch (Exception ex) {
            Logger.getLogger(MemberWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        return c;
    }

    private void txtSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusGained
        if (txtSearch.getText().trim().equalsIgnoreCase("Search Contacts")) {
            txtSearch.setText(null);
            txtSearch.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_txtSearchFocusGained

    private void txtSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusLost
        if (txtSearch.getText().trim().equalsIgnoreCase("")) {
            txtSearch.setText("Search Contacts");
            txtSearch.setForeground(Color.GRAY);
        }
    }//GEN-LAST:event_txtSearchFocusLost

    private void lstContactsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstContactsMouseClicked
        if (evt.getClickCount() == 2 && lstContacts.getSelectedIndex() != -1) {
            SingleChat c = new SingleChat(this, false, ((JLabel) lstContacts.getSelectedValue()).getText(),memberContainer.getStub());
            c.setVisible(true);
        }
    }//GEN-LAST:event_lstContactsMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        String txt = txtSearch.getText().trim();
        if (txt.isEmpty()) {
            fillContacts(contacts);
        } else {
            ArrayList<String> c = new ArrayList<String>();
            for (int i = 0; i < contacts.size(); i++) {
                String t = contacts.get(i);
                if (t.toLowerCase().contains(txt.toLowerCase())) {
                    c.add(t);
                }
            }
            fillContacts(c);
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void mnuDebugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuDebugActionPerformed
        if (mnuDebug.isSelected()) {
            debug.setVisible(true);
        } else {
            debug.setVisible(false);
        }
    }//GEN-LAST:event_mnuDebugActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        int response = JOptionPane.showConfirmDialog(MemberWindow.this, "Are you sure want to exit?", "Exit GCom", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
        if (response == JOptionPane.OK_OPTION) {
            //member.logOut();
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing
//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//
//            public void run() {
//                new MemberWindow().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JComboBox cmbStatus;
    private javax.swing.JPopupMenu contactListPopUp;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblMemberName;
    private javax.swing.JLabel logoLabel;
    private javax.swing.JList lstContacts;
    private javax.swing.JCheckBoxMenuItem mnuDebug;
    private javax.swing.JMenuBar mnuMainMenu;
    private javax.swing.JCheckBoxMenuItem mnuSingleChat;
    private javax.swing.JMenuItem refreshList;
    private javax.swing.JMenu toolsMenu;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the group
     */
    public Group getGroup() {
        return group;
    }

    /**
     * @param group the group to set
     */
    public void setGroup(Group group) {
        this.group = group;
    }

    /**
     * @return the server
     */
    public RMIServer getServer() {
        return server;
    }

    /**
     * @param server the server to set
     */
    public void setServer(RMIServer server) {
        this.server = server;
    }

}

class MyListRenderer extends DefaultListCellRenderer {

    @Override
    public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
        //JLabel l = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        if (value instanceof JLabel) {
            this.setText(((JLabel) value).getText());
            this.setIcon(((JLabel) value).getIcon());
            this.setBackground(isSelected ? Color.GRAY : Color.white);
            //this.setForeground(isSelected ? Color.white : Color.black);
        }
        return this;
    }
}
